plugins {
    id 'org.quiltmc.loom' version '1.+'
    id 'maven-publish'
}

version = project.version
group = maven_group
archivesBaseName = archives_base_name

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt, Quilt Mappings
    maven { url = 'https://maven.parchmentmc.org' } // Parchment Mappings
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib
    maven { url = "https://jitpack.io/" } // Mixin Extras
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}" // Minecraft
    mappings(loom.layered { // Mappings
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${qfapi_version}-${minecraft_version}"

    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:networking:${porting_lib_version}"))
}

project.configurations.all {
    exclude(group: "net.fabricmc", module: "fabric-loader")
    exclude(group: "net.fabricmc.fabric-api")
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}

task buildOrPublish {
    group = "build"
    String mavenUser = System.getenv().MAVEN_USER
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.getByName("publish"))
        println("prepared for publish")
    } else {
        dependsOn(tasks.getByName("build"))
        println("prepared for build")
    }
}

// configure the maven publication
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = "${version}-b${System.getenv("GITHUB_RUN_NUMBER")}"

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}